"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/candles";
exports.ids = ["pages/api/candles"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcandles&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fcandles.js&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcandles&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fcandles.js&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_candles_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/pages/api/candles.js */ \"(api-node)/./src/pages/api/candles.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_candles_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_candles_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/candles\",\n        pathname: \"/api/candles\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_candles_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGY2FuZGxlcyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnNyYyUyRnBhZ2VzJTJGYXBpJTJGY2FuZGxlcy5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDRTtBQUMxRDtBQUN1RDtBQUN2RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsc0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHNEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLHlHQUFtQjtBQUNsRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vc3JjL3BhZ2VzL2FwaS9jYW5kbGVzLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jYW5kbGVzXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY2FuZGxlc1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcandles&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fcandles.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/candles.js":
/*!**********************************!*\
  !*** ./src/pages/api/candles.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var undici__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! undici */ \"undici\");\n/* harmony import */ var undici__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(undici__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _utils_accountProxyRouter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/accountProxyRouter.js */ \"(api-node)/./src/utils/accountProxyRouter.js\");\n/* harmony import */ var _utils_usageTracker_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/usageTracker.js */ \"(api-node)/./src/utils/usageTracker.js\");\n\n\n\n\n\n\n// Map timeframes from UI to Oanda format\nconst timeframeMap = {\n    '15m': 'M15',\n    '30m': 'M30',\n    '1h': 'H1',\n    '2h': 'H2',\n    '4h': 'H4',\n    'D': 'D',\n    'W': 'W'\n};\n// Format data for the chart\nfunction transformOandaCandles(oandaCandles) {\n    if (!oandaCandles || !oandaCandles.candles || !oandaCandles.candles.length) {\n        return [];\n    }\n    return oandaCandles.candles.map((candle)=>({\n            time: new Date(candle.time).getTime() / 1000,\n            o: parseFloat(candle.mid.o),\n            h: parseFloat(candle.mid.h),\n            l: parseFloat(candle.mid.l),\n            c: parseFloat(candle.mid.c),\n            volume: candle.volume || 0\n        }));\n}\n// Keep a list of known bad proxies to avoid using them again\nconst badProxies = new Set();\n// Keep a list of known good proxies\nconst goodProxies = new Set();\n// Log proxy status for debugging\nfunction logProxyStatus() {\n    console.log(`=== PROXY STATUS ===`);\n    console.log(`Good proxies: ${goodProxies.size}`);\n    console.log(`Bad proxies: ${badProxies.size}`);\n    if (goodProxies.size > 0) {\n        console.log(`Good proxy examples: ${Array.from(goodProxies).slice(0, 3).join(', ')}...`);\n    }\n    if (badProxies.size > 0) {\n        console.log(`Bad proxy examples: ${Array.from(badProxies).slice(0, 3).join(', ')}...`);\n    }\n    console.log(`===================`);\n}\n// Fetch candles from Oanda API with proxy fallback\nasync function fetchOandaCandles(pair, timeframe, count = 500, timestamp = Date.now()) {\n    let retryCount = 0;\n    const maxRetries = 50;\n    // Try with the default proxy first\n    let { account, proxy, proxyAuth } = (0,_utils_accountProxyRouter_js__WEBPACK_IMPORTED_MODULE_4__.routePairToAccountAndProxy)(pair);\n    // If this proxy is known to be bad, try to get another one immediately\n    if (proxy && badProxies.has(`${proxy.host}:${proxy.port}`)) {\n        console.log(`Skipping known bad proxy ${proxy.host}:${proxy.port} for ${pair}`);\n        // Try to find a different proxy\n        proxy = getAlternativeProxy(proxy);\n    }\n    // If this proxy is known to be good, log it\n    if (proxy && goodProxies.has(`${proxy.host}:${proxy.port}`)) {\n        console.log(`Using known good proxy ${proxy.host}:${proxy.port} for ${pair}`);\n    }\n    const accountId = account?.id || process.env.OANDA_ACCOUNT_ID_1;\n    const apiToken = account?.token || process.env.OANDA_API_TOKEN_1;\n    if (!accountId || !apiToken) {\n        throw new Error('Oanda API credentials not found');\n    }\n    while(retryCount < maxRetries){\n        try {\n            (0,_utils_usageTracker_js__WEBPACK_IMPORTED_MODULE_5__.trackApiHit)(pair, accountId, proxy?.host);\n            const granularity = timeframeMap[timeframe] || 'M15';\n            const baseUrl = 'https://api-fxpractice.oanda.com';\n            const endpoint = `/v3/accounts/${accountId}/instruments/${pair}/candles`;\n            const params = new URLSearchParams({\n                count: count.toString(),\n                granularity: granularity,\n                price: 'M',\n                t: timestamp.toString()\n            }).toString();\n            // Set up request options \n            let options = {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${apiToken}`,\n                    'Content-Type': 'application/json'\n                },\n                signal: AbortSignal.timeout(30000) // 30 second timeout\n            };\n            // Configure proxy EXACTLY like in datacenter-forex.js\n            if (proxy && proxyAuth) {\n                console.log(`Using proxy for ${pair}: ${proxy.type}://${proxy.host}:${proxy.port} (attempt ${retryCount + 1})`);\n                const proxyAgent = new undici__WEBPACK_IMPORTED_MODULE_3__.ProxyAgent({\n                    uri: `${proxy.type}://${proxy.host}:${proxy.port}`,\n                    token: `Basic ${Buffer.from(`${proxyAuth.username}:${proxyAuth.password}`).toString('base64')}`\n                });\n                options.dispatcher = proxyAgent;\n            } else {\n                console.log(`No proxy available for ${pair}, trying direct connection (attempt ${retryCount + 1})`);\n            }\n            console.log(`Fetching ${pair} data, attempt ${retryCount + 1}...`);\n            const response = await fetch(`${baseUrl}${endpoint}?${params}`, options);\n            if (!response.ok) {\n                throw new Error(`Oanda API error: ${response.status} ${response.statusText}`);\n            }\n            const data = await response.json();\n            // Mark this proxy as good since it worked\n            if (proxy) {\n                const proxyId = `${proxy.host}:${proxy.port}`;\n                if (!goodProxies.has(proxyId)) {\n                    console.log(`Marking proxy ${proxyId} as good`);\n                    goodProxies.add(proxyId);\n                    // Log proxy status periodically\n                    if (goodProxies.size % 5 === 0) {\n                        logProxyStatus();\n                    }\n                }\n            }\n            return data;\n        } catch (error) {\n            console.error(`Error fetching data from Oanda for ${pair} (attempt ${retryCount + 1}/${maxRetries}):`, error.message);\n            // Mark the current proxy as bad\n            if (proxy) {\n                const proxyId = `${proxy.host}:${proxy.port}`;\n                console.log(`Marking proxy ${proxyId} as bad`);\n                badProxies.add(proxyId);\n                // Log proxy status periodically\n                if (badProxies.size % 5 === 0) {\n                    logProxyStatus();\n                }\n            }\n            // Always try a different proxy on next attempt, regardless of error type\n            proxy = getAlternativeProxy(proxy);\n            if (!proxy) {\n                console.warn('No alternative proxies available, continuing without proxy');\n                // Set proxy to null to try direct connection\n                proxy = null;\n            }\n            retryCount++;\n            console.log(`Retrying in 2 seconds with ${proxy ? 'new proxy' : 'direct connection'}... (${retryCount}/${maxRetries})`);\n            await new Promise((resolve)=>setTimeout(resolve, 2000));\n        }\n    }\n    throw new Error(`Failed to fetch ${pair} data after ${maxRetries} attempts`);\n}\n// Helper function to get an alternative proxy\nfunction getAlternativeProxy(currentProxy) {\n    try {\n        // Read available proxies from file\n        const fs = __webpack_require__(/*! fs */ \"fs\");\n        const path = __webpack_require__(/*! path */ \"path\");\n        const proxiesPath = path.join(process.cwd(), 'data/proxylist.json');\n        const proxiesData = fs.readFileSync(proxiesPath, 'utf8');\n        const proxies = JSON.parse(proxiesData);\n        // Create proxy ID of current proxy to filter it out\n        const currentProxyId = currentProxy ? `${currentProxy.host}:${currentProxy.port}` : '';\n        // First, try known good proxies\n        if (goodProxies.size > 0) {\n            // Get a list of known good proxies\n            const knownGoodProxies = Array.from(goodProxies);\n            const randomGoodProxy = knownGoodProxies[Math.floor(Math.random() * knownGoodProxies.length)];\n            // Don't return the same proxy we just tried\n            if (randomGoodProxy !== currentProxyId) {\n                console.log(`Using known good proxy: ${randomGoodProxy}`);\n                // Find this proxy in the original list to get all the details\n                for (const proxy of proxies){\n                    const proxyId = `${proxy[1]}:${proxy[2]}`;\n                    if (proxyId === randomGoodProxy) {\n                        return {\n                            type: proxy[0],\n                            host: proxy[1],\n                            port: proxy[2],\n                            id: proxy[3]\n                        };\n                    }\n                }\n            }\n        }\n        // Filter out the current proxy and any known bad proxies\n        const availableProxies = proxies.filter((proxy)=>{\n            const proxyId = `${proxy[1]}:${proxy[2]}`;\n            return proxyId !== currentProxyId && !badProxies.has(proxyId);\n        });\n        if (availableProxies.length === 0) {\n            console.warn('No available proxies found');\n            return null;\n        }\n        // Select a random available proxy\n        const randomProxy = availableProxies[Math.floor(Math.random() * availableProxies.length)];\n        console.log(`Selected new proxy: ${randomProxy[1]}:${randomProxy[2]}`);\n        return {\n            type: randomProxy[0],\n            host: randomProxy[1],\n            port: randomProxy[2],\n            id: randomProxy[3]\n        };\n    } catch (error) {\n        console.error('Error finding alternative proxy:', error);\n        return null;\n    }\n}\nasync function handler(req, res) {\n    const { pair, timeframe, mode } = req.query;\n    if (!pair || !timeframe) {\n        return res.status(400).json({\n            error: 'Missing pair or timeframe parameter'\n        });\n    }\n    // Add some request tracking to diagnose \n    console.log(`Processing request for ${pair} with timeframe ${timeframe}, mode=${mode || 'full'}`);\n    try {\n        // Get the routed account for this pair first\n        const { account, proxy, proxyAuth } = (0,_utils_accountProxyRouter_js__WEBPACK_IMPORTED_MODULE_4__.routePairToAccountAndProxy)(pair);\n        console.log(`Routing ${pair} to account ${account?.id} with proxy ${proxy?.host}:${proxy?.port}`);\n        // Add a cache buster parameter to ensure we're getting fresh data\n        const timestamp = Date.now();\n        // For latest mode, we only need the most recent candle\n        const count = mode === 'latest' ? 1 : 500;\n        // Fetch data from Oanda API\n        const oandaData = await fetchOandaCandles(pair, timeframe, count, timestamp);\n        // Transform data for chart\n        const transformedCandles = transformOandaCandles(oandaData);\n        // Get the current price (use the last candle's close price)\n        const currentPrice = transformedCandles.length > 0 ? transformedCandles[transformedCandles.length - 1].c : null;\n        // Return the data with a cache control header to prevent browser caching\n        res.setHeader('Cache-Control', 'no-store, max-age=0');\n        // If mode is 'latest', just return the latest candle and current price\n        if (mode === 'latest') {\n            return res.status(200).json({\n                latestCandle: transformedCandles.length > 0 ? transformedCandles[transformedCandles.length - 1] : null,\n                currentPrice,\n                source: 'oanda',\n                timestamp: timestamp\n            });\n        }\n        // Otherwise return full candle data\n        return res.status(200).json({\n            candles: transformedCandles,\n            currentPrice,\n            source: 'oanda',\n            routedAccount: {\n                accountId: account?.id,\n                proxyHost: proxy?.host,\n                pair: pair,\n                timestamp: timestamp // Include timestamp to prevent client-side caching\n            }\n        });\n    } catch (error) {\n        console.error(`Error in candles API for ${pair}:`, error);\n        // Extract more detailed error info for debugging\n        const errorDetails = {\n            message: error.message,\n            cause: error.cause?.code || error.cause?.message || 'unknown',\n            stack: error.stack?.split('\\n').slice(0, 3).join('\\n')\n        };\n        console.error(`Detailed error for ${pair}:`, JSON.stringify(errorDetails));\n        // Return a proper error response\n        return res.status(500).json({\n            error: 'Failed to fetch candle data',\n            details: errorDetails,\n            pair: pair\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/candles.js\n");

/***/ }),

/***/ "(api-node)/./src/utils/accountProxyRouter.js":
/*!*****************************************!*\
  !*** ./src/utils/accountProxyRouter.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPairAccountProxyMap: () => (/* binding */ getPairAccountProxyMap),\n/* harmony export */   routePairToAccountAndProxy: () => (/* binding */ routePairToAccountAndProxy)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n// Get directory path for imports\nconst __filename = (0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)(\"file:///Users/emraan.adem/Documents/Projects/Nervala/Nervala.files/src/utils/accountProxyRouter.js\");\nconst __dirname = path__WEBPACK_IMPORTED_MODULE_1___default().dirname(__filename);\n// Load accounts, proxies and proxy auth info\nlet accounts = [];\nlet proxies = [];\nlet proxyAuth = {};\ntry {\n    // Load accounts\n    const accountsPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(__dirname, '../../data/accounts.json');\n    const accountsData = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(accountsPath, 'utf8');\n    accounts = JSON.parse(accountsData);\n    // Load proxies\n    const proxiesPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(__dirname, '../../data/proxylist.json');\n    const proxiesData = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(proxiesPath, 'utf8');\n    proxies = JSON.parse(proxiesData);\n    // Load proxy authentication\n    const proxyAuthPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(__dirname, '../../data/proxyauth.json');\n    const proxyAuthData = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(proxyAuthPath, 'utf8');\n    proxyAuth = JSON.parse(proxyAuthData);\n    console.log(`Loaded ${accounts.length} accounts and ${proxies.length} proxies for routing`);\n} catch (error) {\n    console.error('Error loading account/proxy data:', error);\n}\n/**\n * Routes a currency pair to a specific account and proxy combination\n * Uses a deterministic algorithm based on the currency pair name\n */ function routePairToAccountAndProxy(pair) {\n    if (!accounts.length || !proxies.length) {\n        console.warn('No accounts or proxies available for routing');\n        return {\n            account: null,\n            proxy: null,\n            proxyAuth\n        };\n    }\n    // Use a hash of the pair name to consistently route the same pair to the same account/proxy\n    const pairHash = pair.split('').reduce((hash, char)=>{\n        return (hash << 5) - hash + char.charCodeAt(0);\n    }, 0);\n    // Use absolute value in case of negative hash\n    const positiveHash = Math.abs(pairHash);\n    // Select account and proxy based on the hash\n    const accountIndex = positiveHash % accounts.length;\n    const proxyIndex = positiveHash % proxies.length;\n    const account = accounts[accountIndex];\n    const proxy = proxies[proxyIndex];\n    // Return the selected resources\n    return {\n        account: {\n            id: account[0],\n            token: account[1]\n        },\n        proxy: {\n            type: proxy[0],\n            host: proxy[1],\n            port: proxy[2],\n            id: proxy[3]\n        },\n        proxyAuth\n    };\n}\n/**\n * Get a list of all available pairs with their assigned accounts and proxies\n * Useful for debugging and monitoring\n */ function getPairAccountProxyMap(pairs) {\n    const mapping = {};\n    pairs.forEach((pair)=>{\n        const { account, proxy } = routePairToAccountAndProxy(pair);\n        if (account && proxy) {\n            mapping[pair] = {\n                accountId: account.id,\n                proxyHost: `${proxy.host}:${proxy.port}`\n            };\n        }\n    });\n    return mapping;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy91dGlscy9hY2NvdW50UHJveHlSb3V0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBb0I7QUFDSTtBQUNZO0FBRXBDLGlDQUFpQztBQUNqQyxNQUFNRyxhQUFhRCxrREFBYUEsQ0FBQyxvR0FBZTtBQUNoRCxNQUFNRyxZQUFZSixtREFBWSxDQUFDRTtBQUUvQiw2Q0FBNkM7QUFDN0MsSUFBSUksV0FBVyxFQUFFO0FBQ2pCLElBQUlDLFVBQVUsRUFBRTtBQUNoQixJQUFJQyxZQUFZLENBQUM7QUFFakIsSUFBSTtJQUNGLGdCQUFnQjtJQUNoQixNQUFNQyxlQUFlVCxnREFBUyxDQUFDSSxXQUFXO0lBQzFDLE1BQU1PLGVBQWVaLHNEQUFlLENBQUNVLGNBQWM7SUFDbkRILFdBQVdPLEtBQUtDLEtBQUssQ0FBQ0g7SUFFdEIsZUFBZTtJQUNmLE1BQU1JLGNBQWNmLGdEQUFTLENBQUNJLFdBQVc7SUFDekMsTUFBTVksY0FBY2pCLHNEQUFlLENBQUNnQixhQUFhO0lBQ2pEUixVQUFVTSxLQUFLQyxLQUFLLENBQUNFO0lBRXJCLDRCQUE0QjtJQUM1QixNQUFNQyxnQkFBZ0JqQixnREFBUyxDQUFDSSxXQUFXO0lBQzNDLE1BQU1jLGdCQUFnQm5CLHNEQUFlLENBQUNrQixlQUFlO0lBQ3JEVCxZQUFZSyxLQUFLQyxLQUFLLENBQUNJO0lBRXZCQyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUVkLFNBQVNlLE1BQU0sQ0FBQyxjQUFjLEVBQUVkLFFBQVFjLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQztBQUM1RixFQUFFLE9BQU9DLE9BQU87SUFDZEgsUUFBUUcsS0FBSyxDQUFDLHFDQUFxQ0E7QUFDckQ7QUFFQTs7O0NBR0MsR0FDTSxTQUFTQywyQkFBMkJDLElBQUk7SUFDN0MsSUFBSSxDQUFDbEIsU0FBU2UsTUFBTSxJQUFJLENBQUNkLFFBQVFjLE1BQU0sRUFBRTtRQUN2Q0YsUUFBUU0sSUFBSSxDQUFDO1FBQ2IsT0FBTztZQUNMQyxTQUFTO1lBQ1RDLE9BQU87WUFDUG5CO1FBQ0Y7SUFDRjtJQUVBLDRGQUE0RjtJQUM1RixNQUFNb0IsV0FBV0osS0FBS0ssS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQyxDQUFDQyxNQUFNQztRQUM1QyxPQUFPLENBQUVELFFBQVEsS0FBS0EsT0FBUUMsS0FBS0MsVUFBVSxDQUFDO0lBQ2hELEdBQUc7SUFFSCw4Q0FBOEM7SUFDOUMsTUFBTUMsZUFBZUMsS0FBS0MsR0FBRyxDQUFDUjtJQUU5Qiw2Q0FBNkM7SUFDN0MsTUFBTVMsZUFBZUgsZUFBZTVCLFNBQVNlLE1BQU07SUFDbkQsTUFBTWlCLGFBQWFKLGVBQWUzQixRQUFRYyxNQUFNO0lBRWhELE1BQU1LLFVBQVVwQixRQUFRLENBQUMrQixhQUFhO0lBQ3RDLE1BQU1WLFFBQVFwQixPQUFPLENBQUMrQixXQUFXO0lBRWpDLGdDQUFnQztJQUNoQyxPQUFPO1FBQ0xaLFNBQVM7WUFDUGEsSUFBSWIsT0FBTyxDQUFDLEVBQUU7WUFDZGMsT0FBT2QsT0FBTyxDQUFDLEVBQUU7UUFDbkI7UUFDQUMsT0FBTztZQUNMYyxNQUFNZCxLQUFLLENBQUMsRUFBRTtZQUNkZSxNQUFNZixLQUFLLENBQUMsRUFBRTtZQUNkZ0IsTUFBTWhCLEtBQUssQ0FBQyxFQUFFO1lBQ2RZLElBQUlaLEtBQUssQ0FBQyxFQUFFO1FBQ2Q7UUFDQW5CO0lBQ0Y7QUFDRjtBQUVBOzs7Q0FHQyxHQUNNLFNBQVNvQyx1QkFBdUJDLEtBQUs7SUFDMUMsTUFBTUMsVUFBVSxDQUFDO0lBRWpCRCxNQUFNRSxPQUFPLENBQUN2QixDQUFBQTtRQUNaLE1BQU0sRUFBRUUsT0FBTyxFQUFFQyxLQUFLLEVBQUUsR0FBR0osMkJBQTJCQztRQUV0RCxJQUFJRSxXQUFXQyxPQUFPO1lBQ3BCbUIsT0FBTyxDQUFDdEIsS0FBSyxHQUFHO2dCQUNkd0IsV0FBV3RCLFFBQVFhLEVBQUU7Z0JBQ3JCVSxXQUFXLEdBQUd0QixNQUFNZSxJQUFJLENBQUMsQ0FBQyxFQUFFZixNQUFNZ0IsSUFBSSxFQUFFO1lBQzFDO1FBQ0Y7SUFDRjtJQUVBLE9BQU9HO0FBQ1QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbXJhYW4uYWRlbS9Eb2N1bWVudHMvUHJvamVjdHMvTmVydmFsYS9OZXJ2YWxhLmZpbGVzL3NyYy91dGlscy9hY2NvdW50UHJveHlSb3V0ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5cbi8vIEdldCBkaXJlY3RvcnkgcGF0aCBmb3IgaW1wb3J0c1xuY29uc3QgX19maWxlbmFtZSA9IGZpbGVVUkxUb1BhdGgoaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IF9fZGlybmFtZSA9IHBhdGguZGlybmFtZShfX2ZpbGVuYW1lKTtcblxuLy8gTG9hZCBhY2NvdW50cywgcHJveGllcyBhbmQgcHJveHkgYXV0aCBpbmZvXG5sZXQgYWNjb3VudHMgPSBbXTtcbmxldCBwcm94aWVzID0gW107XG5sZXQgcHJveHlBdXRoID0ge307XG5cbnRyeSB7XG4gIC8vIExvYWQgYWNjb3VudHNcbiAgY29uc3QgYWNjb3VudHNQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJy4uLy4uL2RhdGEvYWNjb3VudHMuanNvbicpO1xuICBjb25zdCBhY2NvdW50c0RhdGEgPSBmcy5yZWFkRmlsZVN5bmMoYWNjb3VudHNQYXRoLCAndXRmOCcpO1xuICBhY2NvdW50cyA9IEpTT04ucGFyc2UoYWNjb3VudHNEYXRhKTtcbiAgXG4gIC8vIExvYWQgcHJveGllc1xuICBjb25zdCBwcm94aWVzUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9kYXRhL3Byb3h5bGlzdC5qc29uJyk7XG4gIGNvbnN0IHByb3hpZXNEYXRhID0gZnMucmVhZEZpbGVTeW5jKHByb3hpZXNQYXRoLCAndXRmOCcpO1xuICBwcm94aWVzID0gSlNPTi5wYXJzZShwcm94aWVzRGF0YSk7XG4gIFxuICAvLyBMb2FkIHByb3h5IGF1dGhlbnRpY2F0aW9uXG4gIGNvbnN0IHByb3h5QXV0aFBhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vZGF0YS9wcm94eWF1dGguanNvbicpO1xuICBjb25zdCBwcm94eUF1dGhEYXRhID0gZnMucmVhZEZpbGVTeW5jKHByb3h5QXV0aFBhdGgsICd1dGY4Jyk7XG4gIHByb3h5QXV0aCA9IEpTT04ucGFyc2UocHJveHlBdXRoRGF0YSk7XG4gIFxuICBjb25zb2xlLmxvZyhgTG9hZGVkICR7YWNjb3VudHMubGVuZ3RofSBhY2NvdW50cyBhbmQgJHtwcm94aWVzLmxlbmd0aH0gcHJveGllcyBmb3Igcm91dGluZ2ApO1xufSBjYXRjaCAoZXJyb3IpIHtcbiAgY29uc29sZS5lcnJvcignRXJyb3IgbG9hZGluZyBhY2NvdW50L3Byb3h5IGRhdGE6JywgZXJyb3IpO1xufVxuXG4vKipcbiAqIFJvdXRlcyBhIGN1cnJlbmN5IHBhaXIgdG8gYSBzcGVjaWZpYyBhY2NvdW50IGFuZCBwcm94eSBjb21iaW5hdGlvblxuICogVXNlcyBhIGRldGVybWluaXN0aWMgYWxnb3JpdGhtIGJhc2VkIG9uIHRoZSBjdXJyZW5jeSBwYWlyIG5hbWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdXRlUGFpclRvQWNjb3VudEFuZFByb3h5KHBhaXIpIHtcbiAgaWYgKCFhY2NvdW50cy5sZW5ndGggfHwgIXByb3hpZXMubGVuZ3RoKSB7XG4gICAgY29uc29sZS53YXJuKCdObyBhY2NvdW50cyBvciBwcm94aWVzIGF2YWlsYWJsZSBmb3Igcm91dGluZycpO1xuICAgIHJldHVybiB7XG4gICAgICBhY2NvdW50OiBudWxsLFxuICAgICAgcHJveHk6IG51bGwsXG4gICAgICBwcm94eUF1dGhcbiAgICB9O1xuICB9XG4gIFxuICAvLyBVc2UgYSBoYXNoIG9mIHRoZSBwYWlyIG5hbWUgdG8gY29uc2lzdGVudGx5IHJvdXRlIHRoZSBzYW1lIHBhaXIgdG8gdGhlIHNhbWUgYWNjb3VudC9wcm94eVxuICBjb25zdCBwYWlySGFzaCA9IHBhaXIuc3BsaXQoJycpLnJlZHVjZSgoaGFzaCwgY2hhcikgPT4ge1xuICAgIHJldHVybiAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNoYXIuY2hhckNvZGVBdCgwKTtcbiAgfSwgMCk7XG4gIFxuICAvLyBVc2UgYWJzb2x1dGUgdmFsdWUgaW4gY2FzZSBvZiBuZWdhdGl2ZSBoYXNoXG4gIGNvbnN0IHBvc2l0aXZlSGFzaCA9IE1hdGguYWJzKHBhaXJIYXNoKTtcbiAgXG4gIC8vIFNlbGVjdCBhY2NvdW50IGFuZCBwcm94eSBiYXNlZCBvbiB0aGUgaGFzaFxuICBjb25zdCBhY2NvdW50SW5kZXggPSBwb3NpdGl2ZUhhc2ggJSBhY2NvdW50cy5sZW5ndGg7XG4gIGNvbnN0IHByb3h5SW5kZXggPSBwb3NpdGl2ZUhhc2ggJSBwcm94aWVzLmxlbmd0aDtcbiAgXG4gIGNvbnN0IGFjY291bnQgPSBhY2NvdW50c1thY2NvdW50SW5kZXhdO1xuICBjb25zdCBwcm94eSA9IHByb3hpZXNbcHJveHlJbmRleF07XG4gIFxuICAvLyBSZXR1cm4gdGhlIHNlbGVjdGVkIHJlc291cmNlc1xuICByZXR1cm4ge1xuICAgIGFjY291bnQ6IHtcbiAgICAgIGlkOiBhY2NvdW50WzBdLFxuICAgICAgdG9rZW46IGFjY291bnRbMV1cbiAgICB9LFxuICAgIHByb3h5OiB7XG4gICAgICB0eXBlOiBwcm94eVswXSxcbiAgICAgIGhvc3Q6IHByb3h5WzFdLFxuICAgICAgcG9ydDogcHJveHlbMl0sXG4gICAgICBpZDogcHJveHlbM11cbiAgICB9LFxuICAgIHByb3h5QXV0aFxuICB9O1xufVxuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2YgYWxsIGF2YWlsYWJsZSBwYWlycyB3aXRoIHRoZWlyIGFzc2lnbmVkIGFjY291bnRzIGFuZCBwcm94aWVzXG4gKiBVc2VmdWwgZm9yIGRlYnVnZ2luZyBhbmQgbW9uaXRvcmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFpckFjY291bnRQcm94eU1hcChwYWlycykge1xuICBjb25zdCBtYXBwaW5nID0ge307XG4gIFxuICBwYWlycy5mb3JFYWNoKHBhaXIgPT4ge1xuICAgIGNvbnN0IHsgYWNjb3VudCwgcHJveHkgfSA9IHJvdXRlUGFpclRvQWNjb3VudEFuZFByb3h5KHBhaXIpO1xuICAgIFxuICAgIGlmIChhY2NvdW50ICYmIHByb3h5KSB7XG4gICAgICBtYXBwaW5nW3BhaXJdID0ge1xuICAgICAgICBhY2NvdW50SWQ6IGFjY291bnQuaWQsXG4gICAgICAgIHByb3h5SG9zdDogYCR7cHJveHkuaG9zdH06JHtwcm94eS5wb3J0fWBcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbiAgXG4gIHJldHVybiBtYXBwaW5nO1xufSAiXSwibmFtZXMiOlsiZnMiLCJwYXRoIiwiZmlsZVVSTFRvUGF0aCIsIl9fZmlsZW5hbWUiLCJ1cmwiLCJfX2Rpcm5hbWUiLCJkaXJuYW1lIiwiYWNjb3VudHMiLCJwcm94aWVzIiwicHJveHlBdXRoIiwiYWNjb3VudHNQYXRoIiwiam9pbiIsImFjY291bnRzRGF0YSIsInJlYWRGaWxlU3luYyIsIkpTT04iLCJwYXJzZSIsInByb3hpZXNQYXRoIiwicHJveGllc0RhdGEiLCJwcm94eUF1dGhQYXRoIiwicHJveHlBdXRoRGF0YSIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJlcnJvciIsInJvdXRlUGFpclRvQWNjb3VudEFuZFByb3h5IiwicGFpciIsIndhcm4iLCJhY2NvdW50IiwicHJveHkiLCJwYWlySGFzaCIsInNwbGl0IiwicmVkdWNlIiwiaGFzaCIsImNoYXIiLCJjaGFyQ29kZUF0IiwicG9zaXRpdmVIYXNoIiwiTWF0aCIsImFicyIsImFjY291bnRJbmRleCIsInByb3h5SW5kZXgiLCJpZCIsInRva2VuIiwidHlwZSIsImhvc3QiLCJwb3J0IiwiZ2V0UGFpckFjY291bnRQcm94eU1hcCIsInBhaXJzIiwibWFwcGluZyIsImZvckVhY2giLCJhY2NvdW50SWQiLCJwcm94eUhvc3QiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./src/utils/accountProxyRouter.js\n");

/***/ }),

/***/ "(api-node)/./src/utils/usageTracker.js":
/*!***********************************!*\
  !*** ./src/utils/usageTracker.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLoadDistribution: () => (/* binding */ getLoadDistribution),\n/* harmony export */   getUsageStats: () => (/* binding */ getUsageStats),\n/* harmony export */   trackApiHit: () => (/* binding */ trackApiHit)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst USAGE_FILE = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'data', 'apiUsage.json');\n// Initialize the usage file if it doesn't exist\nfunction ensureUsageFile() {\n    try {\n        const dataDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'data');\n        // Create the data directory if it doesn't exist\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dataDir)) {\n            fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(dataDir, {\n                recursive: true\n            });\n        }\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(USAGE_FILE)) {\n            fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(USAGE_FILE, JSON.stringify({\n                accounts: {},\n                proxies: {},\n                pairs: {},\n                lastReset: new Date().toISOString(),\n                dailyStats: []\n            }, null, 2));\n        }\n        return true;\n    } catch (error) {\n        console.error('Error initializing usage file:', error);\n        return false;\n    }\n}\n// Track API hit for an account/proxy combination\nfunction trackApiHit(pair, accountId, proxyHost) {\n    try {\n        if (!ensureUsageFile()) return;\n        // Read the current usage data\n        const usageData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(USAGE_FILE, 'utf8'));\n        const now = new Date();\n        const timestamp = now.toISOString();\n        // Check if we need to archive daily stats (once per day)\n        const lastReset = new Date(usageData.lastReset);\n        if (now.getDate() !== lastReset.getDate() || now.getMonth() !== lastReset.getMonth() || now.getFullYear() !== lastReset.getFullYear()) {\n            // Archive current stats to dailyStats\n            usageData.dailyStats.push({\n                date: lastReset.toISOString().split('T')[0],\n                accounts: {\n                    ...usageData.accounts\n                },\n                proxies: {\n                    ...usageData.proxies\n                },\n                pairs: {\n                    ...usageData.pairs\n                }\n            });\n            // Keep only the last 30 days of stats\n            if (usageData.dailyStats.length > 30) {\n                usageData.dailyStats = usageData.dailyStats.slice(-30);\n            }\n            // Reset counters\n            usageData.accounts = {};\n            usageData.proxies = {};\n            usageData.pairs = {};\n            usageData.lastReset = timestamp;\n        }\n        // Increment account usage\n        if (accountId) {\n            if (!usageData.accounts[accountId]) {\n                usageData.accounts[accountId] = {\n                    hits: 0,\n                    lastHit: null,\n                    pairs: {}\n                };\n            }\n            usageData.accounts[accountId].hits++;\n            usageData.accounts[accountId].lastHit = timestamp;\n            // Track pairs used with this account\n            if (!usageData.accounts[accountId].pairs[pair]) {\n                usageData.accounts[accountId].pairs[pair] = 0;\n            }\n            usageData.accounts[accountId].pairs[pair]++;\n        }\n        // Increment proxy usage\n        if (proxyHost) {\n            if (!usageData.proxies[proxyHost]) {\n                usageData.proxies[proxyHost] = {\n                    hits: 0,\n                    lastHit: null,\n                    pairs: {}\n                };\n            }\n            usageData.proxies[proxyHost].hits++;\n            usageData.proxies[proxyHost].lastHit = timestamp;\n            // Track pairs used with this proxy\n            if (!usageData.proxies[proxyHost].pairs[pair]) {\n                usageData.proxies[proxyHost].pairs[pair] = 0;\n            }\n            usageData.proxies[proxyHost].pairs[pair]++;\n        }\n        // Track pair request frequency\n        if (!usageData.pairs[pair]) {\n            usageData.pairs[pair] = {\n                hits: 0,\n                lastHit: null\n            };\n        }\n        usageData.pairs[pair].hits++;\n        usageData.pairs[pair].lastHit = timestamp;\n        // Save the updated usage data\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(USAGE_FILE, JSON.stringify(usageData, null, 2));\n    } catch (error) {\n        console.error('Error tracking API hit:', error);\n    }\n}\n// Get current usage statistics\nfunction getUsageStats() {\n    try {\n        if (!ensureUsageFile()) return {};\n        const usageData = JSON.parse(fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(USAGE_FILE, 'utf8'));\n        return usageData;\n    } catch (error) {\n        console.error('Error getting usage stats:', error);\n        return {};\n    }\n}\n// Calculate the load distribution percentage for accounts\nfunction getLoadDistribution() {\n    try {\n        const stats = getUsageStats();\n        const totalHits = Object.values(stats.accounts || {}).reduce((sum, account)=>sum + account.hits, 0);\n        if (totalHits === 0) return {\n            accounts: {},\n            proxies: {}\n        };\n        const accountDistribution = {};\n        Object.entries(stats.accounts || {}).forEach(([accountId, data])=>{\n            accountDistribution[accountId] = {\n                percentage: data.hits / totalHits * 100,\n                hits: data.hits,\n                pairs: data.pairs\n            };\n        });\n        const totalProxyHits = Object.values(stats.proxies || {}).reduce((sum, proxy)=>sum + proxy.hits, 0);\n        const proxyDistribution = {};\n        Object.entries(stats.proxies || {}).forEach(([proxyHost, data])=>{\n            proxyDistribution[proxyHost] = {\n                percentage: data.hits / totalProxyHits * 100,\n                hits: data.hits,\n                pairs: data.pairs\n            };\n        });\n        return {\n            accounts: accountDistribution,\n            proxies: proxyDistribution,\n            pairs: stats.pairs || {},\n            lastReset: stats.lastReset,\n            dailyStats: stats.dailyStats || []\n        };\n    } catch (error) {\n        console.error('Error calculating load distribution:', error);\n        return {\n            accounts: {},\n            proxies: {}\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/utils/usageTracker.js\n");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "undici":
/*!*************************!*\
  !*** external "undici" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("undici");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcandles&preferredRegion=&absolutePagePath=.%2Fsrc%2Fpages%2Fapi%2Fcandles.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();